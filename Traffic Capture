Traffic Capture - Day 2

  ~Outcomes
    Describe Network Traffic Sniffing
    Perform real-time network traffic sniffing

  ~Practical Use
    Network troubleshooting
    Diagnosing improper routing or switching
    Identifying port/protocol misconfigurations
    Monitor networking consumption
    Intercepting usernames and passwords
    Eavesdrop on network communications

  ~Disadvantages
    Requires elevate permissions - (Sudo tcpdump)
    Can only capture what NIC can see
    Cannot capture local traffic
    Can consume massive amounts of system resources
    Lost packets on busy networks

  ~Two ways to capture - hardwar and software packet sniffers

  ~Socket types
    User Space Sockets
      Stream  Socket - TCP, A stream socket provides a connection-oriented and sequenced flow of data which has methods for establishment and teardown of connections as well as error detection.
      Datagram Socket - UDP, A datagram socket is connection-less by nature. Sockets built this way can send and receive data, but there is no mechanism to retransmit data if a packet is dropped.
    Kernel Space Sockets
      RAW Sockets, A raw socket allows for the direct sending and receiving of IP packets without automatic protocol-specific transport layer formatting, 
      meaning that all headers are typically included in the packet and not removed when moving up the network stack.

  ~Capture Library
    Requires root for promiscuous mode (listen on all NICs) all captured packets are created as RAW sockets.

  ~Capture Programs
    tcpdump  NetMiner
    Wireshark  SolarWinds
    tshark  EtterCap
    p0f  NetworkMiner
    BetterCap

  ~Kernel API
    TCPDUMP requests a RAW Socket creation
    Filters are set using the SO_ATTACH_FILTER
    SO_ATTACH_FILTER allows us to attach a Berkley Packet Filter to the socket to capture incoming packets.

  ~Bitwise Masking
    BPFs can read 1 (byte), 2 (half-word) or 4 (word)
    BPFs alone will only filter to the byte level
    Bit-wise masking allow filtering precision to the bit level
    Binary (0) to ignore bit
    Binary (1) to match bit

  ~



    
